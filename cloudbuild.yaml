steps:
  - id: "build image"
    name: "gcr.io/cloud-builders/docker"
    args:
      [
        "build",
        "-t",
        "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}",
        "-f",
        "${_DOCKERFILE}",
        ".",
      ]

  - id: "push image"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}"]

  - id: "Grab Static Folder"
    name: "ubuntu"
    args:
      [
        "docker",
        "create",
        "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}",
        "&&",
        "docker",
        "cp",
        "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:/app/static",
        "./static",
        "&&",
        "docker",
        "rm",
        "-f",
        "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}",
      ]

  - id: "Push Static to Firebase Hosting"
    name: "gcr.io/nick-learning-322807/firebase"
    args:
      [
        "deploy",
        "--project=nick-learning-322807",
        "--only=hosting:next-with-cdn",
      ]

  - id: "deploy service"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    args:
      [
        "run",
        "deploy",
        "${_SERVICE_NAME}",
        "--platform",
        "managed",
        "--region",
        "${_DEPLOY_REGION}",
        "--allow-unauthenticated",
        "--image",
        "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}",
      ]

  # Force the new revision to serve 100% of traffic.
  - id: "ensure service live"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    args:
      [
        "run",
        "services",
        "update-traffic",
        "${_SERVICE_NAME}",
        "--to-latest",
        "--platform",
        "managed",
        "--region",
        "${_DEPLOY_REGION}",
      ]

timeout: 1000s
options:
  machineType: "E2_HIGHCPU_8"
